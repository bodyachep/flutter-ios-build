import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '../models/wall.dart';
import '../models/wall_element.dart';
import '/screens/rooms/room_detail_screen.dart';

class WallProvider with ChangeNotifier {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  List<Wall> _walls = [];
  List<Wall> get walls => _walls;

  void reset() {
    _walls = [];
    notifyListeners();
  }

  // LOAD —Å –æ—á–∏—Å—Ç–∫–æ–π –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
  Future<void> loadWalls(String placeId, String roomId) async {
    reset(); // << –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    if (_walls.isNotEmpty) {
      print("‚úÖ –°—Ç–µ–Ω—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞!");
      return; // üîπ –ï—Å–ª–∏ —Å—Ç–µ–Ω—ã —É–∂–µ –µ—Å—Ç—å, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö —Å–Ω–æ–≤–∞
    }
    var snapshot = await _firestore
        .collection("places")
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .collection("walls")
        .get();
    List<Wall> loadedWalls = [];
    for (var doc in snapshot.docs) {
      var wall = Wall.fromMap(doc.data());
      // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–µ–Ω–æ–π
      var elementSnapshot = await _firestore
          .collection("places")
          .doc(placeId)
          .collection("rooms")
          .doc(roomId)
          .collection("walls")
          .doc(wall.id)
          .collection("elements")
          .get();
      // ‚úÖ –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ —Å—é–¥–∞
      final elements = elementSnapshot.docs
          .map((doc) => WallElement.fromMap(doc.data()))
          .toList();
      loadedWalls.add(Wall(
        id: wall.id,
        length: wall.length,
        height: wall.height,
        angle: wall.angle,
        thickness: wall.thickness,
        direction: wall.direction,
        material: wall.material,
        order: wall.order,
        elements: elements, // ‚úÖ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞
      ));
    }
    _walls = loadedWalls;
    notifyListeners(); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–µ–Ω: ${_walls.length}");
  }

  /// üîπ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–µ–Ω—É
  Future<void> addWall(String placeId, String roomId, Wall wall) async {
    var newWallRef = _firestore
        .collection("places") // ‚úÖ –¢–µ–ø–µ—Ä—å —Å—Ç–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .collection("walls")
        .doc(wall.id); // <-- –ø–µ—Ä–µ–¥–∞—ë–º —Å–≤–æ–π ID
    await newWallRef.set(wall.toMap());
    _walls.add(Wall(
      id: newWallRef.id,
      length: wall.length,
      height: wall.height,
      angle: wall.angle,
      thickness: wall.thickness,
      direction: wall.direction,
      material: wall.material,
      elements: wall.elements,
      order: wall.order, // ‚úÖ –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
    ));
    notifyListeners();
  }

  Future<void> addElementToWall(
    String placeId,
    String roomId,
    String wallId,
    WallElement element,
  ) async {
    final wall = _walls.firstWhere((w) => w.id == wallId);

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    final alreadyExists = wall.elements.any((e) =>
        e.id == element.id ||
        (e.type == element.type &&
            e.params.toString() == element.params.toString()));

    if (alreadyExists) {
      print("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç");
      return;
    }
    wall.elements.add(element);
    await _firestore
        .collection("places")
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .collection("walls")
        .doc(wallId)
        .collection("elements")
        .doc(element.id) // ‚úÖ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
        .set(element.toMap());

    notifyListeners();
  }

  /// üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–µ–Ω—É
  Future<void> updateWall(
      String placeId, String roomId, String wallId, Wall updatedWall) async {
    await _firestore
        .collection("places") // ‚úÖ –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–Ω—É –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø—É—Ç–∏
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .collection("walls")
        .doc(wallId)
        .update(updatedWall.toMap());

    int index = _walls.indexWhere((w) => w.id == wallId);
    if (index != -1) {
      _walls[index] = updatedWall;
      notifyListeners();
    }
  }

  /// üîπ –£–¥–∞–ª—è–µ–º —Å—Ç–µ–Ω—É
  Future<void> removeWall(String placeId, String roomId, String wallId) async {
    await _firestore
        .collection("places") // ‚úÖ –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .collection("walls")
        .doc(wallId)
        .delete();

    _walls.removeWhere((wall) => wall.id == wallId);
    notifyListeners();
  }

  void loadInitialWalls(List<Wall> walls) {
    _walls = walls;
    notifyListeners();
  }

  Future<void> deleteElement(
    String placeId,
    String roomId,
    String wallId,
    String elementId,
  ) async {
    await _firestore
        .collection("places")
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .collection("walls")
        .doc(wallId)
        .collection("elements")
        .doc(elementId)
        .delete();
  }

  Future<void> updateElement(
      String placeId, String roomId, String wallId, WallElement element) async {
    await _firestore
        .collection("places")
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .collection("walls")
        .doc(wallId)
        .collection("elements")
        .doc(element.id)
        .set(element.toMap()); // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
  }
}
