import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import '../models/room.dart';
import '../models/wall.dart';
import '../screens/walls/wall_input_screen.dart';

class RoomProvider with ChangeNotifier {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  List<Room> _rooms = [];

  List<Room> get rooms => _rooms;

  // final Set<String> _loadedRooms =
  //     {}; // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º Set –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
//  void setActiveRoom(Room room) {

  //  notifyListeners();
  // }

  //void clearActiveRoom() {

  // notifyListeners();
  // }

  /// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è
  Future<void> loadRooms(String placeId) async {
    var snapshot = await _firestore
        .collection("places")
        .doc(placeId)
        .collection("rooms")
        .get();

    _rooms = snapshot.docs.map((doc) {
      var data = doc.data();
      data['id'] = doc.id; // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `id`
      return Room.fromMap(data);
    }).toList();
// üî• –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–π –∫–æ–º–Ω–∞—Ç—ã
    for (var room in _rooms) {
      print(
          "üìÑ –ö–æ–º–Ω–∞—Ç–∞: ID=${room.id}, Name=${room.name}, Place=${room.placeId}");
    }
    notifyListeners();
  }

  Future<Room?> loadRoom(String placeId, String roomId) async {
    print(
        "üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–∑ Firestore: placeId=$placeId, roomId=$roomId");
    var doc = await _firestore
        .collection("places")
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .get();

    if (!doc.exists) {
      print("‚ùå –ö–æ–º–Ω–∞—Ç–∞ $roomId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ $placeId!");
      return null;
    }

    var room = Room.fromMap(doc.data()!);
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ _rooms
    int index = _rooms.indexWhere((r) => r.id == roomId);
    if (index != -1) {
      _rooms[index] = room;
    } else {
      _rooms.add(room);
    }

    notifyListeners();
    print("‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ID=${room.id}, Name=${room.name}");
    return room;
  }

  /// üîπ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
  Future<String> addRoom(String placeId, String roomName) async {
    try {
      // üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ ID
      String roomId = roomName
          .trim()
          .replaceAll(
              RegExp(r'[^\w–∞-—è–ê-–Ø—ë–Å0-9-]'), '') // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
          .replaceAll(' ', '_') // –ü—Ä–æ–±–µ–ª—ã ‚Üí "_"
          .toLowerCase();
      print("üì° –°–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É: placeId=$placeId, roomId=$roomId");

      // üîπ –ï—Å–ª–∏ ID –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π ID
      if (roomId.isEmpty) {
        roomId = "room_${DateTime.now().millisecondsSinceEpoch}";
      }

      // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞
      var existingRoom = await _firestore
          .collection("places")
          .doc(placeId)
          .collection("rooms")
          .doc(roomId)
          .get();

      if (existingRoom.exists) {
        print("‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ —Å ID $roomId —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
        return roomId; // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
      }

      // üîπ –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–æ–º–Ω–∞—Ç—ã
      final newRoom = Room(
        id: roomId,
        placeId: placeId,
        name: roomName,
        walls: [],
      );

      // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ Firestore
      await _firestore
          .collection("places")
          .doc(placeId)
          .collection("rooms")
          .doc(roomId)
          .set(newRoom.toMap());

      _rooms.add(newRoom);
      notifyListeners();

      print("‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: $roomName (ID: $roomId)");
      return roomId;
    } catch (e) {
      print("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: $e");
      return Future.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: $e"); // ‚úÖ –¢–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    }
  }

  /// üîπ –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∏ –µ—ë —Å—Ç–µ–Ω—ã
  Future<void> removeRoom(String placeId, String roomId) async {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–µ–Ω—ã —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
    var wallRefs = await _firestore
        .collection("places")
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .collection("walls")
        .get();

    for (var doc in wallRefs.docs) {
      await doc.reference.delete();
    }

    // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–Ω–∞—Ç—É
    await _firestore
        .collection("places")
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .delete();

    _rooms.removeWhere((room) => room.id == roomId);
    notifyListeners();
    print("üóë –ö–æ–º–Ω–∞—Ç–∞ $roomId —É–¥–∞–ª–µ–Ω–∞ –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–µ–Ω–∞–º–∏.");
  }

  Future<void> updateRoom(
      String placeId, String roomId, Map<String, dynamic> updates) async {
    await _firestore
        .collection("places")
        .doc(placeId)
        .collection("rooms")
        .doc(roomId)
        .update(updates);

    int index = _rooms.indexWhere((r) => r.id == roomId);
    if (index != -1) {
      _rooms[index] = Room(
        id: roomId,
        placeId: placeId,
        name: updates['name'] ?? _rooms[index].name,
        walls: _rooms[index].walls,
      );
      notifyListeners();
    }
  }
}
