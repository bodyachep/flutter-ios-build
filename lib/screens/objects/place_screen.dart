import 'package:flutter/material.dart';
import '/models/place.dart';
import 'package:provider/provider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '/models/wall.dart'; // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Wall

import 'dart:async';
import '/providers/room_provider.dart';
import '/screens/walls/wall_input_screen.dart';
import '/providers/wall_provider.dart';

import '../rooms/room_screen.dart';
import 'home_screen.dart';
import '/screens/rooms/room_screen.dart';
import '/screens/rooms/room_input_screen.dart';
import '/screens/rooms/room_detail_screen.dart';
import '../walls/wall_edit_screen.dart';

class PlaceScreen extends StatefulWidget {
  final String placeId;
  // final String wallId; // ‚úÖ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å!
  final String? roomId; // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º roomId

  const PlaceScreen({
    super.key,
    required this.placeId,
    this.roomId,
  });
  @override
  PlaceScreenState createState() => PlaceScreenState();
}

class PlaceScreenState extends State<PlaceScreen> {
  List<Map<String, dynamic>> _rooms = [];
  List<Wall> walls = []; // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `walls`
  String newRoomName = ''; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–¥–µ—Å—å
  @override
  void initState() {
    super.initState();
    _loadRooms();
  }

  /// üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –∏–∑ Firestore

  Future<void> _loadRooms() async {
    var snapshots = await FirebaseFirestore.instance
        .collection('places')
        .doc(widget.placeId)
        .collection('rooms')
        .get();
    if (!mounted) return; // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç–∫—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç

    setState(() {
      _rooms = snapshots.docs.map((doc) {
        var data = doc.data();
        if (data == null)
          return <String, dynamic>{}; // ‚úÖ –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ç–æ—á–Ω–æ Map<String, dynamic>

        var fixedData = data as Map<String, dynamic>;
        fixedData['id'] = doc.id;
        return fixedData;
      }).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("–ü–æ–º–µ—â–µ–Ω–∏–µ")),
      body: _rooms.isEmpty
          ? const Center(child: Text("–ù–µ—Ç –∫–æ–º–Ω–∞—Ç. –ù–∞–∂–º–∏—Ç–µ + –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."))
          : ListView.builder(
              itemCount: _rooms.length,
              itemBuilder: (context, index) {
                final room = _rooms[index];
                return ListTile(
                  title: Text(room['name'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                  onTap: () {
                    print("üè† –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—É: ${room['id']}"); // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞

                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => RoomDetailsScreen(
                          placeId: widget.placeId,
                          roomId: room['id'],
                        ),
                      ),
                    );
                  },
                );
              },
            ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          // üîπ 1. –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã

          final roomName = await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => RoomInputScreen(placeId: widget.placeId),
            ),
          );

          if (roomName == null || roomName.isEmpty) return;

          // // üîπ 2. –°–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—É
          final newRoomId =
              await Provider.of<RoomProvider>(context, listen: false)
                  .addRoom(widget.placeId, roomName);
          print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ —Å ID: $newRoomId");

          // üîπ 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–µ–Ω
          final List<Wall>? newWalls = await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => WallInputScreen(
                placeId: widget.placeId,

                roomId: newRoomId,

                //    roomName: roomName,
                //   wallId:
                //     "wall_${DateTime.now().millisecondsSinceEpoch}", // ‚úÖ –¢–µ–ø–µ—Ä—å `wallId` –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è
                //    initialWalls: [],
              ),
            ),
          );

          // ‚ùå –ï—Å–ª–∏ —Å—Ç–µ–Ω—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚Äì –Ω–µ —Å–æ–∑–¥–∞—ë–º –∫–æ–º–Ω–∞—Ç—ÉP
          if (newWalls == null || newWalls.isEmpty) return;

          // üîπ 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–µ–Ω—ã –≤ Firestore
          final wallProvider =
              Provider.of<WallProvider>(context, listen: false);
          for (var wall in newWalls) {
            await wallProvider.addWall(widget.placeId, newRoomId, wall);
            print('üèÅ –ü–µ—Ä–µ—Ö–æ–¥ –≤ WallInputScreen | roomId=$newRoomId');
          }

          // üîπ 5. –û—Ç–∫—Ä—ã–≤–∞–µ–º RoomDetailsScreen —Å —á–µ—Ä—Ç–µ–∂–æ–º
          if (context.mounted) {
            print(
                "üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º RoomDetailsScreen: placeId=${widget.placeId}, roomId=$newRoomId");

            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => RoomDetailsScreen(
                  placeId: widget.placeId,
                  roomId: newRoomId,
                ),
              ),
            );
          }
        },
        child: const Icon(Icons.add),
      ),
    );
  }
}
