import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '/models/wall.dart';
import '/models/wall_element.dart';
import '/providers/wall_provider.dart';
import '/widgets/drawing/room_painter.dart';
import '/widgets/drawing/element_editor_dialog.dart';

Wall createMetaWall({
  required String placeId,
  required String roomId,
  required String title,
  required int floor,
  String? gptMeta,
}) {
  return Wall(
    id: "meta_${DateTime.now().millisecondsSinceEpoch}",
    order: 0,
    length: 0,
    height: 0,
    angle: 0,
    thickness: 0,
    direction: "inward",
    material: "–º–µ—Ç–∫–∞",
    elements: [],
    params: {
      "–Ω–∞–∑–≤–∞–Ω–∏–µ": title,
      "—ç—Ç–∞–∂": floor,
      "gptMeta": gptMeta ?? "",
      "—Ç–∏–ø": "–∏–Ω—Ñ–æ"
    },
  );
}

class WallInputScreen extends StatefulWidget {
  final String placeId;
  final String roomId;

  const WallInputScreen({
    Key? key,
    required this.placeId,
    required this.roomId,
  }) : super(key: key);

  @override
  State<WallInputScreen> createState() => _WallInputScreenState();
}

class _WallInputScreenState extends State<WallInputScreen> {
  List<Wall> _walls = [];

  final TextEditingController lengthController = TextEditingController();
  final TextEditingController heightController = TextEditingController();
  final TextEditingController angleController = TextEditingController();

  bool isOuterWall = true;

  bool get isLengthValid => double.tryParse(lengthController.text) != null;
  bool get isHeightValid => double.tryParse(heightController.text) != null;
  bool get isAngleValid => double.tryParse(angleController.text) != null;
  @override
  void initState() {
    super.initState();

    lengthController.text = '3.0';
    heightController.text = '2.5';
    angleController.text = '90';

    void _addWall() {
      final length = double.tryParse(lengthController.text) ?? 0;
      final height = double.tryParse(heightController.text) ?? 2.5;
      final angle = double.tryParse(angleController.text) ?? 90;

      if (length <= 0) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É > 0")),
        );
        return;
      }

      final wall = Wall(
        id: "wall_${DateTime.now().millisecondsSinceEpoch}",
        length: length,
        height: height,
        angle: angle,
        thickness: 0.2,
        direction: isOuterWall ? "inward" : "outward",
        material: "–±–µ—Ç–æ–Ω",
        order: _walls.length + 1,
        elements: [], // —Ç—É—Ç –±—É–¥–µ—Ç –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç!
      );

      setState(() {
        _walls.add(wall);
      });

      // –û—á–∏—Å—Ç–∏–º –ø–æ–ª—è
      //  lengthController.text = '3.0';
      //   heightController.text = '2.5';
      //   angleController.text = '90';
    }

    //   @override
    // void dispose() {
    //  lengthController.dispose();
    //   heightController.dispose();
    //  angleController.dispose();
    //   super.dispose();
    //   }

    WidgetsBinding.instance.addPostFrameCallback((_) {
      final wallProvider = Provider.of<WallProvider>(context, listen: false);
      wallProvider.loadWalls(widget.placeId, widget.roomId).then((_) {
        setState(() {
          _walls = wallProvider.walls;

          final hasMeta = _walls.any((w) => w.order == 0 && w.length == 0);
          if (!hasMeta) {
            final metaWall = createMetaWall(
              placeId: widget.placeId,
              roomId: widget.roomId,
              title: "–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞",
              floor: 1,
              gptMeta: "–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è",
            );
            _walls.insert(0, metaWall);
          }
        });
      });
    });
  }

  String _formatElement(WallElement e) {
    final type = e.type;
    final p = e.params;
    if (e.category == "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π") {
      return "$type ‚Ä¢ ${p["—à–∏—Ä–∏–Ω–∞"] ?? "?"}√ó${p["–≤—ã—Å–æ—Ç–∞"] ?? "?"} –º ‚Ä¢ –æ—Ç—Å—Ç—É–ø: ${p["–æ—Ç—Å—Ç—É–ø"] ?? "?"} –º";
    } else {
      return "$type ‚Ä¢ ${p["value"] ?? "?"} ${p["unit"] ?? ""}";
    }
  }

  @override
  Widget build(BuildContext context) {
    final wallProvider = Provider.of<WallProvider>(context, listen: false);

    return Scaffold(
      appBar: AppBar(title: const Text("–†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–µ–Ω")),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: _walls.length,
              itemBuilder: (context, index) {
                final wall = _walls[index];

                if (wall.length == 0 && wall.order == 0) {
                  return ListTile(
                    title:
                        Text("üìå ${wall.params["–Ω–∞–∑–≤–∞–Ω–∏–µ"] ?? "–ú–µ—Ç–∞-—Å—Ç–µ–Ω–∞"}"),
                    subtitle:
                        Text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${wall.params["gptMeta"] ?? "–Ω–µ—Ç"}"),
                  );
                }

                return ListTile(
                  title: Text(
                      "–°—Ç–µ–Ω–∞ ${index + 1}: ${wall.length} –º, —É–≥–æ–ª ${wall.angle}¬∞"),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const SizedBox(height: 4),
                      ...wall.elements.map((e) => Padding(
                            padding: const EdgeInsets.symmetric(vertical: 4),
                            child: Row(
                              children: [
                                Expanded(child: Text(_formatElement(e))),
                                IconButton(
                                  icon: const Icon(Icons.edit,
                                      size: 20, color: Colors.blue),
                                  onPressed: () async {
                                    print("üîò –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!");
                                    final updated =
                                        await showElementEditorDialog(
                                      context: context,
                                      wallId: wall.id,
                                      initial: e,
                                    );
                                    if (updated != null) {
                                      final index = wall.elements
                                          .indexWhere((el) => el.id == e.id);
                                      if (index != -1) {
                                        wall.elements[index] = updated;
                                        await wallProvider.updateElement(
                                          widget.placeId,
                                          widget.roomId,
                                          wall.id,
                                          updated,
                                        );
                                      }
                                      setState(() {});
                                    }
                                  },
                                ),
                                IconButton(
                                  icon: const Icon(Icons.delete,
                                      size: 20, color: Colors.red),
                                  tooltip: "–£–¥–∞–ª–∏—Ç—å",
                                  onPressed: () async {
                                    final confirm = await showDialog<bool>(
                                      context: context,
                                      builder: (context) => AlertDialog(
                                        title: const Text("–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç?"),
                                        content: Text(
                                            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '${e.type}'?"),
                                        actions: [
                                          TextButton(
                                            onPressed: () =>
                                                Navigator.pop(context, false),
                                            child: const Text("–û—Ç–º–µ–Ω–∞"),
                                          ),
                                          TextButton(
                                            onPressed: () =>
                                                Navigator.pop(context, true),
                                            child: const Text("–£–¥–∞–ª–∏—Ç—å"),
                                          ),
                                        ],
                                      ),
                                    );
                                    if (confirm == true) {
                                      wall.elements
                                          .removeWhere((el) => el.id == e.id);
                                      await wallProvider.deleteElement(
                                        widget.placeId,
                                        widget.roomId,
                                        wall.id,
                                        e.id,
                                      );
                                      setState(() {});
                                    }
                                  },
                                ),
                              ],
                            ),
                          )),
                      TextButton(
                        onPressed: () async {
                          print("–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥, selectedUnit");

                          final element = await showElementEditorDialog(
                            context: context,
                            wallId: wall.id,
                          );
                          if (element != null) {
                            wall.elements.add(element);
                            await wallProvider.addElementToWall(
                              widget.placeId,
                              widget.roomId,
                              wall.id,
                              element,
                            );
                            setState(() {});
                          }
                        },
                        child: const Text("+ –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
          const Divider(),
          Expanded(
            child: CustomPaint(
              painter: RoomPainter(_walls, scale: 20),
              size: Size.infinite,
            ),
          ),
          // üîπ 2. –í–≤–æ–¥ –Ω–æ–≤–æ–π —Å—Ç–µ–Ω—ã
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω—ã",
                    style:
                        TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                const SizedBox(height: 12),
                TextField(
                  controller: lengthController,
                  keyboardType: TextInputType.number,
                  decoration:
                      const InputDecoration(labelText: "–î–ª–∏–Ω–∞ —Å—Ç–µ–Ω—ã (–º)"),
                  onChanged: (_) => setState(() {}),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: heightController,
                  keyboardType: TextInputType.number,
                  decoration:
                      const InputDecoration(labelText: "–í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω—ã (–º)"),
                  onChanged: (_) => setState(() {}),
                ),
                const SizedBox(height: 12),
                TextField(
                  controller: angleController,
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(labelText: "–£–≥–æ–ª (¬∞)"),
                  onChanged: (_) => setState(() {}),
                ),
                const SizedBox(height: 12),
                CheckboxListTile(
                  title: const Text("–°—Ç–µ–Ω–∞ –≤–Ω—É—Ç—Ä—å (–ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ)"),
                  value: isOuterWall,
                  onChanged: (v) => setState(() => isOuterWall = v ?? true),
                ),
                const SizedBox(height: 12),
                ElevatedButton.icon(
                  icon: const Icon(Icons.add),
                  label: const Text("–î–æ–±–∞–≤–∏—Ç—å"),
                  onPressed: () {
                    print("–ü–æ–ª—É—á–µ–Ω —ç–ª–µ–º–µ–Ω");

                    if (!isLengthValid || !isHeightValid || !isAngleValid) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                            content:
                                Text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º")),
                      );
                      return;
                    }
                    double parseNum(dynamic value) {
                      if (value == null) return 0;
                      return double.tryParse(
                              value.toString().replaceAll(',', '.')) ??
                          0;
                    }

                    final angle = double.tryParse(angleController.text) ?? 0.0;
                    if (angle < 0 || angle > 360) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                            content: Text("–£–≥–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 360")),
                      );
                      return;
                    }

                    final wallProvider =
                        Provider.of<WallProvider>(context, listen: false);
                    final walls = wallProvider.walls;
                    final length = parseNum(lengthController.text);

                    Wall wall = Wall(
                      id: "wall_${walls.length + 1}",
                      length: double.tryParse(
                              lengthController.text.replaceAll(',', '.')) ??
                          6.0,
                      height: double.tryParse(
                              heightController.text.replaceAll(',', '.')) ??
                          2.5,
                      angle: angle,
                      thickness: 0.2,
                      direction: "default",
                      material: "–±–µ—Ç–æ–Ω",
                      elements: [],
                      order: walls.length + 1, // üîπ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                    );

                    wallProvider.addWall(widget.placeId, widget.roomId, wall);
                    lengthController.clear();
                    heightController.clear();
                    angleController.clear();
                    setState(() {});
                  },
                ),
              ],
            ),
          ),
          const Divider(),
          // üîπ 3. –ö–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"
          Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                ElevatedButton(
                  onPressed: () {
                    if (_walls.length > 1) {
                      _walls.removeLast();
                      Provider.of<WallProvider>(context, listen: false)
                          .notifyListeners();
                      setState(() {});
                    }
                  },
                  style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.redAccent),
                  child: const Text("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é"),
                ),
                ElevatedButton.icon(
                  onPressed: () async {
                    final wallProvider =
                        Provider.of<WallProvider>(context, listen: false);

                    for (var wall in _walls) {
                      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç–∞-—Å—Ç–µ–Ω—É (–æ–Ω–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞)
                      if (wall.length == 0 && wall.order == 0) continue;

                      await wallProvider.addWall(
                        widget.placeId,
                        widget.roomId,
                        wall,
                      );
                    }

                    wallProvider.reset(); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                    Navigator.pop(context); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
                  },
                  icon: const Icon(Icons.check_circle_outline),
                  label: const Text("‚úî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"),
                  style:
                      ElevatedButton.styleFrom(backgroundColor: Colors.green),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
